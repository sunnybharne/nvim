-- return {
--     "nvimtools/none-ls.nvim",
--     event = { "BufReadPre", "BufNewFile" },
--     dependencies = {
--         "nvim-lua/plenary.nvim", -- Required dependency
--     },
--     config = function()
--         local null_ls = require("null-ls")
--
--         null_ls.setup({
--             sources = {
--                 -- FORMATTING SOURCES
--                 null_ls.builtins.formatting.prettier.with({
--                     filetypes = { "javascript", "typescript", "css", "json", "html", "markdown" },
--                 }),
--                 null_ls.builtins.formatting.black.with({
--                     extra_args = { "--fast" },
--                 }),
--                 null_ls.builtins.formatting.stylua,
--
--                 -- DIAGNOSTICS SOURCES
--                 null_ls.builtins.diagnostics.eslint_d.with({
--                     condition = function(utils)
--                         return utils.root_has_file(".eslintrc.json") or utils.root_has_file(".eslintrc.js")
--                     end,
--                 }),
--                 null_ls.builtins.diagnostics.flake8,
--
--                 -- CODE ACTIONS SOURCES
--                 null_ls.builtins.code_actions.eslint_d,
--
--                 -- HOVER SOURCES (OPTIONAL)
--                 -- Add hover sources if needed
--             },
--             on_attach = function(client, bufnr)
--                 if client.supports_method("textDocument/formatting") then
--                     vim.api.nvim_create_autocmd("BufWritePre", {
--                         buffer = bufnr,
--                         callback = function()
--                             vim.lsp.buf.format({
--                                 bufnr = bufnr,
--                                 filter = function(formatting_client)
--                                     return formatting_client.name == "null-ls"
--                                 end,
--                             })
--                         end,
--                     })
--                 end
--             end,
--         })
--     end,
-- }
