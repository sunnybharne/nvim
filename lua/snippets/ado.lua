local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local c = ls.choice_node
local i = ls.insert_node
local f = ls.function_node

-- Import common utilities
local utils = require("snippets.utils")
local fn = utils.fn

local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node

-- Azure Pipelines snippets
ls.add_snippets('yaml', {
  s("trigger", {
    t({"trigger:"}),
    t({"", "  branches:"}),
    t({"", "    include:"}),
    t({"", "    - main"}),
    t({"", "  paths:"}),
    t({"", "    include:"}),
    t({"", "    - path/**"}),
    t({"", ""}),
    t({"", "pool: 'selfhosted'"}),
    t({"", ""}),
    t({"", "stages:"}),
    t({"", "- stage: "}), i(1, "stage_name"),
    t({"", "  displayName: "}), i(2, "stage_name"),
    t({"", "  jobs:"}),
    t({"", "  - job: "}), i(3, "job_name"),
    t({"", "    displayName: "}), i(4, "job_name"),
    t({"", "    steps: "}),
    t({"", "    - script: echo \"Hello World\""}),
    t({"", "      displayName: \"Print Hello World\""}),
    t({"", ""}),
    i(0, ""),
  }),
  s("stage", {
    t({"stages:"}),
    t({"", "- stage: "}), i(1, "stage_name"),
    t({"", "  displayName: "}), i(2, "stage_name"),
    t({"", "  jobs:"}),
    t({"", "  - job: "}), i(3, "job_name"),
    t({"", "    displayName: "}), i(4, "job_name"),
    t({"", "    steps: "}),
    t({"", "    - script: echo \"Hello World\""}),
    t({"", "      displayName: \"Print Hello World\""}),
    t({"", ""}),
    i(0, ""),
  }),
  s("step-bash-helloworld", {
    t({"    steps: "}),
    t({"", "    - script: "}), i(1, "echo \"Hello World\""),
    t({"", "      displayName: \""}), i(2, "step-bash"), t({"\""}),
    t({"", ""}),
    i(0, ""),
  }),
  s("step-pwsh-task", {
    t({"    - task: azurepowershell@5"}),
    t({"", "      inputs:"}),
    t({"", "        azureSubscription: '"}), i(1, "serviceConnection"), t({"'"}),
    t({"", "        scriptType: 'inlinescript' # 'filepath'"}),
    t({"", "        #scriptPath: '/script.ps1'"}),
    t({"", "        inline: |"}),
    t({"", "          "}), i(2, "echo \"##vso[task.setvariable variable=varname;isoutput=true]varvalue\""),
    t({"", "        #scriptArguments: '-param1 value1 -param2 value2'"}),
    t({"", "        errorActionPreference: 'stop' # 'continue' | 'silentlycontinue'"}),
    t({"", "        failOnStandardError: false"}),
    t({"", "        azurePowerShellVersion:  'latestversion' # 'otherversion'"}),
    t({"", "        #preferredAzurePowerShellVersion: '7.1.0'"}),
    t({"", "        pwsh: true"}),
    t({"", "        workingDirectory: '$(System.DefaultWorkingDirectory)'"}),
    t({"", "      displayName: '"}), i(3, "task displayname"), t({"'"}),
    t({"", "      env:"}),
    t({"", "        KEY: $(VALUE)"}),
    t({"", ""}),
    i(0, ""),
  }),
  s("step-bash-task", {
    t({"    - task: AzureCLI@2"}),
    t({"", "      inputs:"}),
    t({"", "        azureSubscription: '"}), i(1, "serviceConnection"), t({"'"}),
    t({"", "        scriptType: 'bash' # 'ps' | 'pscore' | 'batch'"}),
    t({"", "        scriptLocation: 'inlineScript' # 'scriptPath'"}),
    t({"", "        # scriptPath: '/pathtoscript'"}),
    t({"", "        inlineScript: |"}),
    t({"", "              "}), i(2, "echo \"##vso[task.setvariable variable=varname;isoutput=true]varvalue\""),
    t({"", "        #arguments: # string. Alias: scriptArguments. Script Arguments."}),
    t({"", "        # workingDirectory: '$(System.DefaultWorkingDirectory);"}),
    t({"", "        #failOnStandardError: false # boolean. Fail on Standard Error. Default: false."}),
    t({"", "      displayName: '"}), i(3, "task displayname"), t({"'"}),
    t({"", "      env:"}),
    t({"", "        KEY: $(VALUE)"}),
    t({"", ""}),
    i(0, ""),
  }),
  s("step-publish-artifact", {
    t({"    - task: PublishPipelineArtifact@1"}),
    t({"", "      inputs:"}),
    t({"", "        targetPath: '$(System.DefaultWorkingDirectory)/"}), i(1, "pathtofile"), t({"'"}),
    t({"", "        artifact: '"}), i(2, "artifactName"), t({"'"}),
    t({"", "        publishLocation: 'pipeline' # 'filepath'"}),
    t({"", "      displayName: '"}), i(3, "taskName"), t({"'"}),
    t({"", ""}),
    i(0, ""),
  }),
  s("step-download-artifact", {
    t({"    - task: DownloadPipelineArtifact@2"}),
    t({"", "      inputs:"}),
    t({"", "        buildType: 'current'"}),
    t({"", "        artifactName: '"}), i(1, "artifactName"), t({"'"}),
    t({"", "        targetPath: '$(Pipeline.Workspace)' # path"}),
    t({"", ""}),
    i(0, ""),
  }),
  -- s("step-pwsh-sub-deploy", {
  --   t({"    steps: "}),
  --   t({"", "    - task: AzurePowerShell@5"}),
  --   t({"", "      inputs:"}),
  --   t({"", "        azureSubscription: '"}), i(1, "mi-platform-plz-sub-wi-nonprod-001"), t({"'"}),
  --   t({"", "        ScriptType: 'InlineScript' # 'FilePath'"}),
  --   t({"", "        #ScriptPath: '/script.ps1'"}),
  --   t({"", "        Inline: |"}),
  --   t({"", "          # deploy on mg scope"}),
  --   t({"", "          $response = ("}),
  --   t({"", "             new-AzManagementGroupDeploymentStack `"}),
  --   t({"", "                -Name \""}), i(2, "platform-sub-stack"), t({"\" `"}),
  --   t({"", "                -ManagementGroupId \""}), i(3, "plbtf-platform"), t({"\" `"}),
  --   t({"", "                -Location \""}), i(4, "West India"), t({"\" `"}),
  --   t({"", "                -TemplateParameterFile \"$(System.DefaultWorkingDirectory)/landingZones/tf/params/platform/nonprod.bicepparam\" `"}),
  --   t({"", "                -ActionOnUnManage 'DeleteAll' `"}),
  --   t({"", "                -DenySettingsMode 'None' `"}),
  --   t({"", "                -Force"}),
  --   t({"", "                )"}),
  --   t({"", "                # -ActionOnUnManage 'DetachAll' ` # | DeleteResources | DeleteAll"}),
  --   t({"", "                # -DenySettingsMode 'None' ` # | DenyDelete | DenyWriteAndDelete `"}),
  --   t({"", "                "}),
  --   t({"", "          write-output '------- Outputs -------'"}),
  --   t({"", "          $subscriptionId = $response.Outputs.subscriptionId.Value"}),
  --   t({"", "          write-output 'subscriptionId: ' $subscriptionId"}),
  --   t({"", "          echo \"##vso[task.setvariable variable=subscriptionId;isoutput=true]$subscriptionId\""}),
  --   t({"", ""}),
  --   t({"", "          write-output '------- Response -------'"}),
  --   t({"", "          $response"}),
  --   t({"", ""}),
  --   t({"", "        #ScriptArguments: '-param1 value1 -param2 value2'"}),
  --   t({"", "        errorActionPreference: 'stop' # 'continue' | 'silentlyContinue'"}),
  --   t({"", "        FailOnStandardError: false"}),
  --   t({"", "        azurePowerShellVersion:  'LatestVersion' # 'OtherVersion'"}),
  --   t({"", "        #preferredAzurePowerShellVersion: '7.1.0'"}),
  --   t({"", "        pwsh: true"}),
  --   t({"", "        workingDirectory: '$(System.DefaultWorkingDirectory)'"}),
  --   t({"", "      name: '"}), i(5, "sub_deploy"), t({"'"}),
  --   t({"", "      displayName: '"}), i(6, "sub_deploy"), t({"'"}),
  --   t({"", ""}),
  --   i(0, ""),
  -- }),
  -- s("ado-variables", {
  --   t({"variables:", ""}),
  --   t({"  - name: variableKey", ""}),
  --   t({"    value: 'variableValue'", ""})
  -- }),
  -- s("variables-multi", {
  --   t({"variables:"}),
  --   t({"", "  "}), i(1, "key"), t({":"}),
  --   t({"", "    - "}), i(2, "value1"),
  --   t({"", "    - "}), i(3, "value2"),
  --   t({"", "    - "}), i(4, "value3"),
  --   t({"", ""}),
  --   i(0, ""),
  -- }),
  -- s("azure-cli-task", {
  --   t({"  - task: AzureCLI@2"}),
  --   t({"", "    inputs:"}),
  --   t({"", "      azureSubscription: 'serviceconnection'"}),
  --   t({"", "      scriptType: 'bash'"}),
  --   t({"", "      scriptLocation: 'inlineScript'"}),
  --   t({"", "      inlineScript: |"}),
  --   t({"", "        echo 'Hello from Azure CLI'"}),
  --   t({"", "        az --version"}),
  --   t({"", "      displayName: 'Azure CLI Task'"}),
  --   t({""}),
  --   i(0, ""),
  -- }),
  -- s("powershell-task", {
  --   t({"  - task: AzurePowerShell@5"}),
  --   t({"", "    inputs:"}),
  --   t({"", "      azureSubscription: 'serviceconnection'"}),
  --   t({"", "      azurePowerShellVersion: 'LatestVersion'"}),
  --   t({"", "      ScriptType: 'InlineScript'"}),
  --   t({"", "      Inline: |"}),
  --   t({"", "        Write-Host 'Hello from Azure PowerShell'"}),
  --   t({"", "      errorActionPreference: 'stop'"}),
  --   t({"", "      FailOnStandardError: false"}),
  --   t({"", "      pwsh: true"}),
  --   t({"", "      displayName: 'PowerShell Task'"}),
  --   t({""}),
  --   i(0, ""),
  -- }),

  -- s("build-task", {
  --   t({"  - task: DotNetCoreCLI@2"}),
  --   t({"", "    displayName: 'Build .NET Core'"}),
  --   t({"", "    inputs:"}),
  --   t({"", "      command: 'build'"}),
  --   t({"", "      projects: '**/*.csproj'"}),
  --   t({"", "      arguments: '--configuration $(buildConfiguration)'"}),
  --   t({""}),
  --   i(0, ""),
  -- }),
  -- s("download-artifact", {
  --   t({"  - task: DownloadBuildArtifacts@0"}),
  --   t({"", "    displayName: 'Download Artifacts'"}),
  --   t({"", "    inputs:"}),
  --   t({"", "      buildType: 'current'"}),
  --   t({"", "      downloadType: 'single'"}),
  --   t({"", "      artifactName: 'drop'"}),
  --   t({"", "      downloadPath: '$(System.ArtifactsDirectory)'"}),
  --   t({""}),
  --   i(0, ""),
  -- }),
  -- s("publish-artifact", {
  --   t({"  - task: PublishBuildArtifacts@1"}),
  --   t({"", "    displayName: 'Publish Artifacts'"}),
  --   t({"", "    inputs:"}),
  --   t({"", "      PathtoPublish: '$(build.artifactstagingdirectory)'"}),
  --   t({"", "      ArtifactName: 'drop'"}),
  --   t({"", "      publishLocation: 'Container'"}),
  --   t({""}),
  --   i(0, ""),
  -- }),
  -- s("publish-task", {
  --   t({"  - task: DotNetCoreCLI@2"}),
  --   t({"", "    displayName: 'Publish .NET Core'"}),
  --   t({"", "    inputs:"}),
  --   t({"", "      command: 'publish'"}),
  --   t({"", "      publishWebProjects: true"}),
  --   t({"", "      arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'"}),
  --   t({"", "      zipAfterPublish: true"}),
  --   t({""}),
  --   i(0, ""),
  -- }),
  -- s("test-task", {
  --   t({"  - task: DotNetCoreCLI@2"}),
  --   t({"", "    displayName: 'Test .NET Core'"}),
  --   t({"", "    inputs:"}),
  --   t({"", "      command: 'test'"}),
  --   t({"", "      projects: '**/*Tests/*.csproj'"}),
  --   t({"", "      arguments: '--configuration $(buildConfiguration) --collect \"XPlat Code Coverage\"'"}),
  --   t({"", "      publishTestResults: true"}),
  --   t({""}),
  --   i(0, ""),
  -- }),
})
